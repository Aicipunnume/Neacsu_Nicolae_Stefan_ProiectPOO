#include <iostream>
#include <fstream>
using namespace std;

//Domeniul ales este Nascar(curse).Initialele sunt N(Neacsu), S(Stefan). Contine clasele: Masina, Echipa, Pilot.

class Masina {
private:
	const int anFabricatie;
	string numeMasina;
	int caiPutere;
	int nrUsi;
	static int numarRoti;
	char* marcaMasina;

public:

	const int getAnFabricatie() const {
		return this->anFabricatie;
	}

	string getNumeMasina() const {
		return this->numeMasina;
	}

	int  getCaiPutere() const {
		return this->caiPutere;
	}

	int getNrUsi() const {
		return this->nrUsi;
	}

	static int getNumarRoti()
	{
		return Masina::numarRoti;
	}

	char* getMarcaMasina() const {
		return this->marcaMasina;
	}

	void setNumeMasina(string nume) {
		if (nume.length() >= 3)
			this->numeMasina = nume;
	}

	void setCaiPutere(int cai) {
		if (cai > 0)
			this->caiPutere = cai;
	}

	void setNrUsi(int usi) {
		if (usi > 0)
			this->nrUsi = usi;
	}

	void setMarcaMasina(char* marcaMasina) {
		if (strlen(marcaMasina) >= 2)
		{
			this->marcaMasina = new char[strlen(marcaMasina) + 1];
			strcpy_s(this->marcaMasina, strlen(marcaMasina) + 1, marcaMasina);
		}
	}

	Masina() : anFabricatie(2008) {
		this->numeMasina = "Spark";
		this->caiPutere = 90;
		this->nrUsi = 4;
		this->marcaMasina = new char[strlen("Chevrolet") + 1];
		strcpy_s(this->marcaMasina, strlen("Chevrolet") + 1, "Chevrolet");
	}


	Masina(string numeMasinanou, int caiPutereNoi, int anFabricatienou, int nrUsinou) : anFabricatie(anFabricatienou), numeMasina(numeMasinanou), caiPutere(caiPutereNoi), nrUsi(nrUsinou)
	{
		this->marcaMasina = new char[strlen("Koenigsegg") + 1];
		strcpy_s(this->marcaMasina, strlen("Koenigsegg") + 1, "Koenigsegg");
	}


	Masina(char* marcaMasinaNoua, string numeMasinaNou, const int anFabricatieNou) : numeMasina(numeMasinaNou), anFabricatie(anFabricatieNou)
	{
		this->marcaMasina = new char[strlen(marcaMasinaNoua) + 1];
		strcpy_s(this->marcaMasina, strlen(marcaMasinaNoua) + 1, marcaMasinaNoua);

	}

	Masina(const Masina& p) :anFabricatie(p.anFabricatie) {
		this->numeMasina = p.numeMasina;
		this->caiPutere = p.caiPutere;
		this->nrUsi = p.nrUsi;
		this->marcaMasina = new char[strlen(p.marcaMasina) + 1];
		strcpy_s(this->marcaMasina, strlen(p.marcaMasina) + 1, p.marcaMasina);
	}

	Masina operator=(const Masina& p) {
		if (this != &p)
		{
			if (this->marcaMasina != NULL)
			{
				delete[]this->marcaMasina;
			}
			this->numeMasina = p.numeMasina;
			this->caiPutere = p.caiPutere;
			this->nrUsi = p.nrUsi;
			this->marcaMasina = new char[strlen(p.marcaMasina) + 1];
			strcpy_s(this->marcaMasina, strlen(p.marcaMasina) + 1, p.marcaMasina);
		}
		return *this;
	}
	char& operator[](int index) {
		return this->marcaMasina[index];
	}

	Masina operator+(const Masina& p) {
		Masina aux = *this;
		aux.caiPutere = this->caiPutere + p.caiPutere;
		aux.nrUsi = this->nrUsi + p.nrUsi;
		return aux;
	}

	void afisare()
	{

		cout << "\nAn fabricatie: " << anFabricatie << endl << "Nume masina: " << numeMasina << endl << "Cai putere: " << caiPutere << endl << "Marca masina: " << marcaMasina << endl << "Numar usi:" << nrUsi << endl;

	}

	static void afisareNumarRoti() {
		cout << "\nNumar roti:" << numarRoti << endl;
	}

	~Masina() {
		if (marcaMasina != NULL)
			delete[]this->marcaMasina;
	}

	friend ostream& operator<<(ostream& monitor, const Masina& masina) {
		monitor << "\nAn fabricatie: " << masina.getAnFabricatie() << endl << "Nume masina: " << masina.getNumeMasina() << endl << "Cai putere: " << masina.getCaiPutere() << endl << "Marca masina: " << masina.getMarcaMasina() << endl << "Numar usi:" << masina.getNrUsi() << endl;
		monitor << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
		return monitor;
	}
	friend istream& operator>>(istream& tastatura, Masina& masina) {
		cout << "Nume masina:";
		tastatura >> masina.numeMasina;
		cout << "Cai putere:";
		tastatura >> masina.caiPutere;
		cout << "Nr usi:";
		tastatura >> masina.nrUsi;
		char aux[100];
		cout << "Introduceti marca masina:";
		tastatura >> aux;
		if (masina.marcaMasina != NULL)
		{
			delete[]masina.marcaMasina;
		}
		masina.marcaMasina = new char[strlen(aux) + 1];
		strcpy_s(masina.marcaMasina, strlen(aux) + 1, aux);
		return tastatura;
	}

	friend ofstream& operator<<(ofstream& fisier, const Masina& p) {
		fisier << p.getNumeMasina()<<endl;
		fisier << p.getCaiPutere() << endl;
		fisier << p.getNrUsi() << endl;
		fisier << p.getMarcaMasina() << endl;
		return fisier;
	}
	friend ifstream& operator>>(ifstream& mouse, Masina& p) {
		mouse >> p.numeMasina;
		mouse >> p.caiPutere;
		mouse >> p.nrUsi;
		if (p.marcaMasina != NULL)
			delete[]p.marcaMasina;
		char a[30] = {};
		mouse >> a;
		p.marcaMasina = new char [strlen(a) + 1];
		strcpy_s(p.marcaMasina, strlen(a) + 1, a);
		return mouse;
	}

	friend string getNumeMasina2(Masina a);
	friend int getCaiPutere2(Masina b);

};
string getNumeMasina2(Masina a) {
	if (a.numeMasina == "Spark")
	{
		cout << "Masina perfecta este ";
	}
	else cout << "Masina imperfecta este ";
	return a.numeMasina;
}
int getCaiPutere2(Masina b) {
	if (b.caiPutere != 0) {
		cout << "Masina are multi cai putere: ";
	}
	return b.caiPutere;
}
int Masina::numarRoti = 4;

class Garaj {
private:
	int nrMasini;
	Masina* masina;
	float valoareMasini;
public:
	Garaj() {
		this->nrMasini = 0;
		this->masina = NULL;
		this->valoareMasini = 0;
	}
	Garaj(int nrNou) {
		this->nrMasini = nrNou;
		this->masina = new Masina[nrMasini];
		this->valoareMasini = nrNou*50000;
	}
	~Garaj() {
		if (this->masina != NULL)
			delete[]masina;
	}
	friend ostream& operator<<(ostream& monitor, const Garaj& p) {
		monitor << "\nNr masini:" << p.nrMasini;
		for (int i = 0; i < p.nrMasini; i++)
			monitor << endl << p.masina[i];
		monitor << "\nValoare masini:" << p.valoareMasini<<endl;
		monitor << "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n";
		return monitor;
	}
	Masina& operator[](int index) {
		if (index== 0)
			return this->masina[index];
	}

	int getNrMasini()const {
		return this->nrMasini;
	}
	Masina* getMasini() {
		return this->masina;
	}
	int getValoareMasini()const {
		return this->valoareMasini;
	}
	void setMasini(int nrNou, Masina* masiniNoi) {
		this->nrMasini = nrNou;
		if (this->masina != NULL)
			delete[]this->masina;
		this->masina = new Masina[nrNou];
		for (int i = 0; i < nrNou; i++)
			this->masina[i] = masiniNoi[i];
	}
	void setValoareNoua(int valoareNoua) {
		this->valoareMasini = this->nrMasini * valoareNoua;
	}

	bool operator>(int valoareMedie) {
		return this->valoareMasini / this->nrMasini > valoareMedie;
	}
};


class Pilot {
private:

	string nume;
	const string tara;
	int nrCastiguri;
	static int varsta;
	int* aniExperienta;


public:

	const string getTara() const {
		return tara;
	}
	string getNume() const {
		return nume;
	}
	int getNrCastiguri() const {
		return nrCastiguri;
	}
	static int getVarsta() {
		return varsta;
	}
	int* getAniExperienta() const {
		return this->aniExperienta;
	}

	void setNume(string nume) {
		if (nume.length() >= 2)
			this->nume = nume;
	}
	void setNrCastiguri(int nrCastiguri) {
		if (nrCastiguri > 0)
			this->nrCastiguri = nrCastiguri;
	}
	void setAniExperienta(int* aniExperienta) {
		if (aniExperienta != NULL)
			this->aniExperienta = aniExperienta;
	}

	Pilot() :tara("Romania")
	{
		this->nume = "Stefan";
		this->nrCastiguri = 10;
		this->aniExperienta = new int;
		*aniExperienta = 5;
	}

	Pilot(string numeNou, const string taraNoua, int nrCastiguriNou) :nume(numeNou), tara(taraNoua), nrCastiguri(nrCastiguriNou)
	{
		this->aniExperienta = new int;
		*aniExperienta = 8;
	}

	Pilot(string numeNou, const string taraNoua) :tara(taraNoua), nume(numeNou)
	{
		this->aniExperienta = new int;
		*aniExperienta = 20;
	}

	Pilot(const Pilot& p) :tara(p.tara) {
		this->nume = p.nume;
		this->nrCastiguri = p.nrCastiguri;
		this->aniExperienta = new int(*p.aniExperienta);
	}

	Pilot operator=(const Pilot& p) {
		if (this != &p) {
			if (this->aniExperienta != NULL)
			{
				delete[]this->aniExperienta;
			}
			this->nume = p.nume;
			this->nrCastiguri = p.nrCastiguri;
			this->aniExperienta = new int(*p.aniExperienta);

		}
		return *this;
	}

	bool operator>(const Pilot& p) {
		return this->aniExperienta > p.aniExperienta;
	}

	Pilot operator++() {
		++this->nrCastiguri;
		return *this;
	}
	Pilot operator++(int) {
		Pilot initial = *this;
		this->nrCastiguri += 10;
		return initial;
	}

	bool operator!=(const Pilot& p) {
		return this->nume != p.nume;
	}

	void afisare()
	{
		cout << "\nPilotul cu numele " << nume << " reprezinta " << tara << " si in doar " << *aniExperienta << " ani de experienta a castigat de " << nrCastiguri << " ori." << endl;
	}

	static void eligibilitate() {
		if (varsta >= 18)
			cout << "Soferul este eligibil pentru a conduce o masina de curse.\n";
		else cout << "Soferul nu este eligibil pentru a conduce o masina de curse.\n";
	}

	~Pilot()
	{
		if (aniExperienta != NULL)
			delete[]this->aniExperienta;
	}
	friend ostream& operator<<(ostream& monitor, const Pilot& pilot) {
		monitor << "Pilot:\nNume = " << pilot.getNume() << endl << "Tara = " << pilot.getTara() << endl << "Numar castiguri = " << pilot.getNrCastiguri() << endl << "Varsta = " << pilot.getVarsta() << endl << "Ani experienta = " << *pilot.getAniExperienta() << endl;
		monitor << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
		return monitor;
	}
	friend istream& operator>>(istream& tastatura, Pilot& pilot) {
		cout << "Pilot:\nNume = ";
		tastatura >> pilot.nume;
		cout << "Nr castiguri = ";
		tastatura >> pilot.nrCastiguri;
		int aux;
		cout << "Ani experienta = ";
		tastatura >> aux;
		if (pilot.aniExperienta != NULL)
			delete pilot.aniExperienta;
		pilot.aniExperienta = new int;
		*pilot.aniExperienta = aux;
		return tastatura;
	}
	friend ofstream& operator<<(ofstream& fisier, const Pilot& p) {
		fisier << p.getNume() << endl;
		fisier << p.getNrCastiguri() << endl;
		fisier << *p.getAniExperienta() << endl;
		return fisier;
	}
	friend ifstream& operator>>(ifstream& mouse, Pilot& p) {
		mouse >> p.nume;
		mouse >> p.nrCastiguri;
		if (p.aniExperienta != NULL)
			delete p.aniExperienta;
		int a = 0;
		mouse >> a;
		p.aniExperienta = new int;
		*p.aniExperienta = a;
		return mouse;
	}
	friend int getNrCastiguri2(Pilot a);
	friend string getNume2(Pilot b);
	
	};
int getNrCastiguri2(Pilot a) {
	if (a.nrCastiguri > 10) {
		cout << "Pilotul experimentat are multe castiguri:";
	}
	return a.nrCastiguri;
}
string getNume2(Pilot b) {
	if (b.nume == "Max Verstappen")
		cout << "Cel mai bun pilot este ";
	return b.nume;
}

int Pilot::varsta = 21;


class Echipa {
private:

	string numeEchipa;
	int numarMembri;
	int numarSponsori;
	float* valoareEchipa;
	const string locatieSediu;
	static int numarEchipe;

public:

	const string getLocatieSediu() const {
		return locatieSediu;
	}
	string getNumeEchipa() const {
		return numeEchipa;
	}
	int getNumarMembri() const {
		return numarMembri;
	}
	int getNumarSponsori() const {
		return numarSponsori;
	}
	float* getValoareEchipa() const {
		return this->valoareEchipa;
	}
	static int getNumarEchipe() {
		return numarEchipe;
	}

	void setNumeEchipa(string numeEchipa) {
		if (numeEchipa.length() >= 2)
			this->numeEchipa = numeEchipa;
	}
	void setNumarMembri(int numarMembri) {
		if (numarMembri > 0)
			this->numarMembri = numarMembri;
	}
	void setNumarSponsori(int numarSponsori) {
		if (numarSponsori > 0)
			this->numarSponsori = numarSponsori;
	}
	void setValoareEchipa(float* valoareEchipa) {
		if (valoareEchipa != NULL)
			this->valoareEchipa = valoareEchipa;
	}

	Echipa() :numeEchipa("Redbull"), numarMembri(2), numarSponsori(20), locatieSediu("Germania")
	{
		this->valoareEchipa = new float;
		*valoareEchipa = 960.7;
	}

	Echipa(string numeEchipaNou, int numarMembriNou, int numarSponsoriNou, float valoareEchipaNoua)
		: numeEchipa(numeEchipaNou), numarMembri(numarMembriNou), numarSponsori(numarSponsoriNou), locatieSediu("Germania") {
		this->valoareEchipa = new float;
		*valoareEchipa = valoareEchipaNoua;
	}

	Echipa(string numeEchipaNou) :numeEchipa(numeEchipaNou)
	{
		this->numarSponsori = 120;
		this->valoareEchipa = new float;
		*valoareEchipa = 450.32;

	}

	Echipa(const Echipa& p) :locatieSediu(p.locatieSediu) {

		this->numeEchipa = p.numeEchipa;
		this->numarMembri = p.numarMembri;
		this->numarSponsori = p.numarSponsori;
		this->valoareEchipa = new float(*p.valoareEchipa);
	}

	Echipa operator=(const Echipa& p) {
		if (this != &p) {
			if (this->valoareEchipa != NULL) {
				delete[]this->valoareEchipa;
			}
			this->numeEchipa = p.numeEchipa;
			this->numarMembri = p.numarMembri;
			this->numarSponsori = p.numarSponsori;
			this->valoareEchipa = new float(*p.valoareEchipa);
		}
		return *this;
	}

	bool operator&&(const Echipa& a) {
		if (this->numeEchipa != "NULL" && a.numeEchipa != "NULL")
			return true;
		return false;
	}

	Echipa operator+=(int plusMembri) {
		this->numarMembri += plusMembri;
		return *this;
	}

	Echipa operator-(const Echipa& echipa) {
		Echipa aux = *this;
		if (this->numarSponsori > echipa.numarSponsori)
			aux.numarSponsori = this->numarSponsori - echipa.numarSponsori;
		return aux;
	}
	void afisare() {

		cout << "\nNume echipa:" << numeEchipa << endl << "Numar membrii:" << numarMembri << endl << "Numar sponsori:" << numarSponsori << endl << "Valoare echipa(milioane):" << *valoareEchipa << endl << "Locatie sediu:" << locatieSediu << endl;

	}

	static void afisareNumarEchipe() {
		cout << "Numarul total de echipe: " << numarEchipe << endl;
	}

	~Echipa()
	{
		if (valoareEchipa != NULL)
			delete[]this->valoareEchipa;
	}
	friend int getNumarMembri2(Echipa a);
	friend string getNumeEchipa2(Echipa b);
	friend ostream& operator<<(ostream& monitor, const Echipa& echipa);
	friend istream& operator>>(istream& tastatura, Echipa& echipa)
	{
		cout << "Nume echipa = ";
		tastatura >> echipa.numeEchipa;
		cout << "Numar membri =";
		tastatura >> echipa.numarMembri;
		cout << "Numar sponsori =";
		tastatura >> echipa.numarSponsori;
		float aux;
		tastatura >> aux;
		if (echipa.valoareEchipa != NULL)
			delete echipa.valoareEchipa;
		echipa.valoareEchipa = new float;
		*echipa.valoareEchipa = aux;
		return tastatura;
	}
};
ostream& operator<<(ostream& monitor, const Echipa& echipa) {
	monitor << "Echipa:\nNume echipa = " << echipa.getNumeEchipa() << endl << "Numar membrii = " << echipa.getNumarMembri() << endl << "Numar sponsori = " << echipa.getNumarSponsori() << endl << "Valoare echipa = " << *echipa.getValoareEchipa() << " milioane\nLocatie sediu = " << echipa.getLocatieSediu() << endl;
	monitor << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	return monitor;
}
int getNumarMembri2(Echipa a) {
	if (a.numarMembri != 0) {
		cout << "Echipa are destui membri:";
	}
	return a.numarMembri;
}
string getNumeEchipa2(Echipa b) {
	if (b.numeEchipa == "Redbull")
		cout << "Cea mai buna echipa este ";
	return b.numeEchipa;
}
int Echipa::numarEchipe = 12;


void main()
{
	Masina masina1;
	//masina1.afisare();
	cout << getCaiPutere2(masina1) << endl;
	cout << getNumeMasina2(masina1) << endl;
	cout << "\nAn fabricatie: " << masina1.getAnFabricatie() << endl << "Nume masina: " << masina1.getNumeMasina() << endl << "Cai putere: " << masina1.getCaiPutere() << endl << "Marca masina: " << masina1.getMarcaMasina() << endl << "Numar usi:" << masina1.getNrUsi() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	masina1.setNumeMasina("Bronco");
	masina1.setCaiPutere(150);
	masina1.setNrUsi(2);
	char* marcaMasinaNoua = new char[strlen("Ford") + 1];
	strcpy_s(marcaMasinaNoua, strlen("Ford") + 1, "Ford");
	masina1.setMarcaMasina(marcaMasinaNoua);
	cout << "Masina 1 (dupa modificare):" << endl;
	cout << "\nAn fabricatie: " << masina1.getAnFabricatie() << endl << "Nume masina: " << masina1.getNumeMasina() << endl << "Cai putere: " << masina1.getCaiPutere() << endl << "Marca masina: " << masina1.getMarcaMasina() << endl << "Numar usi:" << masina1.getNrUsi() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	delete[]marcaMasinaNoua;

	Masina masina2("Jesko", 1280, 2022, 2);
	//masina2.afisare();
	cout << getCaiPutere2(masina2) << endl;
	cout << getNumeMasina2(masina2) << endl;
	cout << "\nAn fabricatie: " << masina2.getAnFabricatie() << endl << "Nume masina: " << masina2.getNumeMasina() << endl << "Cai putere: " << masina2.getCaiPutere() << endl << "Marca masina: " << masina2.getMarcaMasina() << endl << "Numar usi:" << masina2.getNrUsi() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;


	char* marcaMasina = new char[strlen("Ford") + 1];
	strcpy_s(marcaMasina, strlen("Ford") + 1, "Ford");
	Masina masina3(marcaMasina, "Mustang", 2023);
	//masina3.afisare();
	cout << getCaiPutere2(masina3) << endl;
	cout << getNumeMasina2(masina3) << endl;
	cout << "\nAn fabricatie: " << masina3.getAnFabricatie() << endl << "Nume masina: " << masina3.getNumeMasina() << endl << "Cai putere: " << masina3.getCaiPutere() << endl << "Marca masina: " << masina3.getMarcaMasina() << endl << "Numar usi:" << masina3.getNrUsi() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	delete[]marcaMasina;

	Masina masina4;
	masina4 = masina1;
	//masina4.afisare();
	cout << getCaiPutere2(masina4) << endl;
	cout << getNumeMasina2(masina4) << endl;
	cout << "\nAn fabricatie: " << masina4.getAnFabricatie() << endl << "Nume masina: " << masina4.getNumeMasina() << endl << "Cai putere: " << masina4.getCaiPutere() << endl << "Marca masina: " << masina4.getMarcaMasina() << endl << "Numar usi:" << masina4.getNrUsi() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Masina masina5 = masina2;
	//masina5.afisare();
	cout << getCaiPutere2(masina5) << endl;
	cout << getNumeMasina2(masina5) << endl;
	cout << "\nAn fabricatie: " << masina5.getAnFabricatie() << endl << "Nume masina: " << masina5.getNumeMasina() << endl << "Cai putere: " << masina5.getCaiPutere() << endl << "Marca masina: " << masina5.getMarcaMasina() << endl << "Numar usi:" << masina5.getNrUsi() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Masina::afisareNumarRoti();
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	cout << "Operator << :\n";
	cout << masina1;

	/*cout << "Operator >> :\n";
	Masina masina6;
	cin >> masina6;
	cout << masina6;*/

	cout << "Operator [] :\n";
	cout << masina1[1];
	masina1[1] = 'a';
	cout << masina1;

	cout << "Operator + :\n";
	masina2 = masina1 + masina4;
	cout << masina2;

	Masina* v_masina = new Masina[4];
	int lungime_vector=4;
	for (int i = 0; i < lungime_vector; i++)
	{
		cout << "Masina " << i+1 << ":\n";
		cin >> v_masina[i];
		cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	for (int i = 0; i < lungime_vector; i++)
	{
		cout << v_masina[i];
		cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	delete[]v_masina;

	int linii = 2, coloane = 2;
	Masina** m_masina = new Masina*[linii];
	for (int i = 0; i < linii; i++)
		m_masina[i] = new Masina[coloane];

	for(int i=0;i<linii;i++)
		for (int j = 0; j < coloane; j++)
		{
			cout << "\nCitire masina de pe linia " << i+1 << " si coloana " << j+1 << endl;
			cin >> m_masina[i][j];
		}
	for (int i = 0; i < linii; i++)
		for (int j = 0; j < coloane; j++)
		{
			cout << "Afisare masina de pe linia " << i+1 << " si coloana " << j+1 << endl;
			cout<< m_masina[i][j];
		}
	for (int i = 0; i < linii; i++)
		delete[]m_masina[i];
	delete[]m_masina;
	Pilot pilot1;
	//pilot1.afisare();
	cout << getNrCastiguri2(pilot1) << endl;
	cout << getNume2(pilot1) << endl;
	cout << "Pilot 1:\nNume = " << pilot1.getNume() << endl << "Tara = " << pilot1.getTara() << endl << "Numar castiguri = " << pilot1.getNrCastiguri() << endl << "Varsta = " << pilot1.getVarsta() << endl << "Ani experienta = " << *pilot1.getAniExperienta() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	string numeNou = "Stephan";
	pilot1.setNume(numeNou);
	pilot1.setNrCastiguri(12);
	int nouaExperienta = 10;
	int* Experienta = new int(nouaExperienta);
	pilot1.setAniExperienta(Experienta);
	cout << "Pilot 1 (dupa modificare): \n";
	cout << "Nume = " << pilot1.getNume() << endl << "Tara = " << pilot1.getTara() << endl << "Numar castiguri = " << pilot1.getNrCastiguri() << endl << "Varsta = " << pilot1.getVarsta() << endl << "Ani experienta = " << *pilot1.getAniExperienta() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;


	Pilot pilot2("Max Verstappen", "Olanda", 49);
	//pilot2.afisare();
	cout << getNrCastiguri2(pilot2) << endl;
	cout << getNume2(pilot2) << endl;
	cout << "Pilot 2:\nNume = " << pilot2.getNume() << endl << "Tara = " << pilot2.getTara() << endl << "Numar castiguri = " << pilot2.getNrCastiguri() << endl << "Varsta = " << pilot2.getVarsta() << endl << "Ani experienta = " << *pilot2.getAniExperienta() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Pilot pilot3("Alonsso", "Franta");
	//pilot3.afisare();
	cout << getNrCastiguri2(pilot3) << endl;
	cout << getNume2(pilot3) << endl;
	cout << "Pilot 3:\nNume = " << pilot3.getNume() << endl << "Tara = " << pilot3.getTara() << endl << "Numar castiguri = " << pilot3.getNrCastiguri() << endl << "Varsta = " << pilot3.getVarsta() << endl << "Ani experienta = " << *pilot3.getAniExperienta() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Pilot pilot4 = pilot1;
	//pilot4.afisare();
	cout << getNrCastiguri2(pilot4) << endl;
	cout << getNume2(pilot4) << endl;
	cout << "Pilot 4:\nNume = " << pilot4.getNume() << endl << "Tara = " << pilot4.getTara() << endl << "Numar castiguri = " << pilot4.getNrCastiguri() << endl << "Varsta = " << pilot4.getVarsta() << endl << "Ani experienta = " << *pilot4.getAniExperienta() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Pilot pilot5;
	pilot5 = pilot2;
	//pilot5.afisare();
	cout << getNrCastiguri2(pilot5) << endl;
	cout << getNume2(pilot5) << endl;
	cout << "Pilot 5:\nNume = " << pilot5.getNume() << endl << "Tara = " << pilot5.getTara() << endl << "Numar castiguri = " << pilot5.getNrCastiguri() << endl << "Varsta = " << pilot5.getVarsta() << endl << "Ani experienta = " << *pilot5.getAniExperienta() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Pilot::eligibilitate();
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	cout << "Operator post ++\n";
	pilot1 = pilot2++;
	cout << "\nPilotul ramane neschimbat:\n" << pilot1;
	cout << "\nPilotul modificat de post++:\n" << pilot2;

	cout << "Operator pre ++\n";
	pilot3 = ++pilot2;
	cout << pilot3;

	cout << "Operator >\n";
	if (pilot1 > pilot2)
		cout << "Pilotul 1 are mai multi ani de experienta decat pilotul 2";
	else cout << "Pilotul 2 are mai multi ani de experienta decat pilotul 1";
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	cout << "Operator !=\n";
	if (pilot4 != pilot2)
		cout << "Pilotii au nume diferite\n";
	else cout << "Pilotii au nume identice\n";
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Pilot* v_pilot = new Pilot[4];
	int lungime_vector2 = 4;
	for (int i = 0; i < lungime_vector2; i++) {
		cin >> v_pilot[i];
		cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	for (int i = 0; i < lungime_vector2; i++) {
		cout << v_pilot[i];
		cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	delete[]v_pilot;

	Echipa echipa1;
	//echipa1.afisare();
	cout << getNumeEchipa2(echipa1) << endl;
	cout << getNumarMembri2(echipa1) << endl;
	cout << "Echipa 1:\nNume echipa = " << echipa1.getNumeEchipa() << endl << "Numar membrii = " << echipa1.getNumarMembri() << endl << "Numar sponsori = " << echipa1.getNumarSponsori() << endl << "Valoare echipa = " << *echipa1.getValoareEchipa() << " milioane\nLocatie sediu = " << echipa1.getLocatieSediu() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	string numeEchipaNou = "Aston Martin";
	echipa1.setNumeEchipa(numeEchipaNou);
	echipa1.setNumarMembri(10);
	echipa1.setNumarSponsori(50);
	float valoareEchipaNoua = 500.5;
	float* ptrValoareEchipa = new float(valoareEchipaNoua);
	echipa1.setValoareEchipa(ptrValoareEchipa);
	cout << "Echipa 1 (dupa modificare):\n\nNume echipa = " << echipa1.getNumeEchipa() << endl << "Numar membrii = " << echipa1.getNumarMembri() << endl << "Numar sponsori = " << echipa1.getNumarSponsori() << endl << "Valoare echipa = " << *echipa1.getValoareEchipa() << " milioane\nLocatie sediu = " << echipa1.getLocatieSediu() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Echipa echipa2("Mercedes", 3, 35, 200.2);
	//echipa2.afisare();
	cout << getNumeEchipa2(echipa2) << endl;
	cout << getNumarMembri2(echipa2) << endl;
	cout << "Echipa 2:\nNume echipa = " << echipa2.getNumeEchipa() << endl << "Numar membrii = " << echipa2.getNumarMembri() << endl << "Numar sponsori = " << echipa2.getNumarSponsori() << endl << "Valoare echipa = " << *echipa2.getValoareEchipa() << " milioane\nLocatie sediu = " << echipa2.getLocatieSediu() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Echipa echipa3("Ferrari");
	//echipa3.afisare();
	cout << getNumeEchipa2(echipa3) << endl;
	cout << getNumarMembri2(echipa3) << endl;
	cout << "Echipa 3:\nNume echipa = " << echipa3.getNumeEchipa() << endl << "Numar membrii = " << echipa3.getNumarMembri() << endl << "Numar sponsori = " << echipa3.getNumarSponsori() << endl << "Valoare echipa = " << *echipa3.getValoareEchipa() << " milioane\nLocatie sediu = " << echipa3.getLocatieSediu() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Echipa echipa4 = echipa1;
	//echipa4.afisare();
	cout << getNumeEchipa2(echipa4) << endl;
	cout << getNumarMembri2(echipa4) << endl;
	cout << "Echipa 4:\nNume echipa = " << echipa4.getNumeEchipa() << endl << "Numar membrii = " << echipa4.getNumarMembri() << endl << "Numar sponsori = " << echipa4.getNumarSponsori() << endl << "Valoare echipa = " << *echipa4.getValoareEchipa() << " milioane\nLocatie sediu = " << echipa4.getLocatieSediu() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Echipa echipa5;
	echipa5 = echipa2;
	//echipa5.afisare();
	cout << getNumeEchipa2(echipa5) << endl;
	cout << getNumarMembri2(echipa5) << endl;
	cout << "Echipa 5:\nNume echipa = " << echipa5.getNumeEchipa() << endl << "Numar membrii = " << echipa5.getNumarMembri() << endl << "Numar sponsori = " << echipa5.getNumarSponsori() << endl << "Valoare echipa = " << *echipa5.getValoareEchipa() << " milioane\nLocatie sediu = " << echipa5.getLocatieSediu() << endl;
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	Echipa::afisareNumarEchipe();
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	cout << "Operatorul &&\n";
	if (echipa1 && echipa2)
		cout << "Ambele echipe au denumire";
	else cout << "Minim o echipa nu are denumire";
	cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;

	echipa2 += 5;
	cout << "Operatorul +=\n" << echipa2;

	cout << "Operatorul -\n";
	echipa1 = echipa3 - echipa2;
	cout << echipa1;
	
	Echipa* v_echipa = new Echipa[3];
	int lungime_vector3 = 3;
	for (int i = 0; i < lungime_vector3; i++) {
		cin >> v_echipa[i];
		cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	for (int i = 0; i < lungime_vector3; i++) {
		cout << v_echipa[i];
		cout << "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" << endl;
	}
	delete[]v_echipa;
	
	//clasa 4 cu has-a
	Garaj g1;
	cout << g1;
	Garaj g2(2);
	cout << g2;
	cout << g2.getNrMasini()<<endl<<g2.getValoareMasini();
	cout << *g2.getMasini();
	if (g2 > 5000)
		cout << "Valoarea masinilor din garaj este mai mare decat media\n";

	//citire 
	ofstream g("Masina.txt", ios::app);
	g << masina1;
	g.close();
	//scriere
	ifstream f("Masina.txt", ios::in);
	f >> masina5;
	cout << masina5;
	f.close();
	

	ofstream l("Pilot.txt", ios::app);
	l << pilot1;
	l.close();
	ifstream f1("Pilot.txt", ios::in);
	f1 >> pilot2;
	cout << pilot2;
	f1.close();

Masina m1;
fstream x("Masina.bin", ios::out | ios::binary);
x.write((char*)&m1,sizeof(Masina));
x.close();

fstream f2("Masina.bin", ios::binary | ios::in);
f2.read((char*)&m1, sizeof(Masina));
f2.close();
cout << endl;
}

